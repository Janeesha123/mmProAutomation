name: Selenium CI with Allure Report

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      # 4. Get history from gh-pages
      - name: Get Allure history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      # 5. Prepare history for current run
      - name: Prepare Allure history
        run: |
          # Create target directories
          mkdir -p target/allure-results
          
          # Copy history from gh-pages if it exists
          if [ -d "gh-pages/history" ]; then
            echo "Found history in gh-pages, copying..."
            cp -r gh-pages/history target/allure-results/
            echo "History files copied:"
            ls -la target/allure-results/history/
          else
            echo "No history found - first run"
            mkdir -p target/allure-results/history
          fi

      # 6. Run tests with unique build info
      - name: Run Tests
        run: |
          # Create executor.json for proper build tracking
          cat > target/allure-results/executor.json << EOF
          {
            "name": "GitHub Actions",
            "type": "github", 
            "url": "${{ github.server_url }}/${{ github.repository }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Allure Report",
            "reportUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
          # Create categories.json for better categorization
          cat > target/allure-results/categories.json << EOF
          [
            {
              "name": "Ignored tests", 
              "matchedStatuses": ["skipped"]
            },
            {
              "name": "Infrastructure problems",
              "matchedStatuses": ["broken", "failed"],
              "messageRegex": ".*bye-bye.*"
            },
            {
              "name": "Outdated tests",
              "matchedStatuses": ["broken"],
              "traceRegex": ".*FileNotFoundException.*"
            },
            {
              "name": "Product defects",
              "matchedStatuses": ["failed"]
            },
            {
              "name": "Test defects",
              "matchedStatuses": ["broken"]
            }
          ]
          EOF
          
          # Run Maven test with clean target to avoid interference
          mvn clean test -Dmaven.test.failure.ignore=true -Dallure.results.directory=target/allure-results

      # 7. Install Allure CLI
      - name: Install Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          wget https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
          tar -zxvf allure-$ALLURE_VERSION.tgz -C $HOME/
          echo "$HOME/allure-$ALLURE_VERSION/bin" >> $GITHUB_PATH

      # 8. Generate Allure Report with Enhanced Debugging
      - name: Generate Allure Report
        run: |
          echo "=== Before Report Generation ==="
          echo "Results directory contents:"
          ls -la target/allure-results/
          
          echo "Checking executor.json:"
          if [ -f "target/allure-results/executor.json" ]; then
            cat target/allure-results/executor.json
          else
            echo "No executor.json found!"
          fi
          
          if [ -d "target/allure-results/history" ]; then
            echo "History directory contents:"
            ls -la target/allure-results/history/
            
            if [ -f "target/allure-results/history/history-trend.json" ]; then
              echo "Current history-trend.json content:"
              cat target/allure-results/history/history-trend.json
            fi
            
            if [ -f "target/allure-results/history/history.json" ]; then
              echo "History.json entries count:"
              grep -c '"buildOrder"' target/allure-results/history/history.json || echo "0"
              echo "Sample history.json content (first 500 chars):"
              head -c 500 target/allure-results/history/history.json
            fi
          fi
          
          # Generate the report
          allure generate target/allure-results -o target/allure-report --clean
          
          echo "=== After Report Generation ==="
          if [ -d "target/allure-report/history" ]; then
            echo "Generated history contents:"
            ls -la target/allure-report/history/
            
            if [ -f "target/allure-report/history/history-trend.json" ]; then
              echo "NEW Trend data:"
              cat target/allure-report/history/history-trend.json
            fi
            
            echo "History entries in generated report:"
            grep -c '"buildOrder"' target/allure-report/history/history.json || echo "0"
          fi
          
          # Check if Overview widgets exist
          if [ -d "target/allure-report/widgets" ]; then
            echo "Widgets directory contents:"
            ls -la target/allure-report/widgets/
          fi

      # 9. Verify Report Structure and Trend Data
      - name: Verify Trend Graphs
        run: |
          echo "=== Verifying Allure Report Structure ==="
          
          # Check if the main files exist
          if [ -f "target/allure-report/index.html" ]; then
            echo "✅ index.html found"
          else
            echo "❌ index.html missing"
          fi
          
          # Check for trend data in app.js or data directory
          if [ -f "target/allure-report/app.js" ]; then
            echo "✅ app.js found"
            
            # Check if trend data is embedded
            if grep -q "history-trend" target/allure-report/app.js; then
              echo "✅ Trend data found in app.js"
            else
              echo "❌ No trend data in app.js"
            fi
          fi
          
          # Check data directory structure
          if [ -d "target/allure-report/data" ]; then
            echo "✅ Data directory found:"
            find target/allure-report/data -name "*.json" | head -5
          fi
          
          # Final verification of trend files
          echo "=== Final Trend Files Check ==="
          for file in history-trend.json duration-trend.json categories-trend.json retry-trend.json; do
            if [ -f "target/allure-report/history/$file" ]; then
              echo "✅ $file exists ($(stat -c%s target/allure-report/history/$file) bytes)"
              if [ -s "target/allure-report/history/$file" ]; then
                echo "   Content: $(head -c 200 target/allure-report/history/$file)"
              fi
            else
              echo "❌ $file missing"
            fi
          done

      # 10. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      # 11. Upload artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: target/allure-report

      # 12. Deploy to SLT server
      - name: Deploy Allure Report with rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: target/allure-report/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
