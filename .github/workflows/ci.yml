name: Selenium CI with Allure Report

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for gh-pages access

      # 2. Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Install Chrome & ChromeDriver
      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      # 4. Get Allure history from gh-pages branch
      - name: Get Allure history
        run: |
          # Create results directory
          mkdir -p target/allure-results
          
          # Check if gh-pages branch exists and get history
          if git ls-remote --exit-code --heads origin gh-pages; then
            echo "Found gh-pages branch, getting history..."
            git worktree add gh-pages-dir gh-pages
            if [ -d "gh-pages-dir/history" ]; then
              echo "Copying history files..."
              cp -r gh-pages-dir/history/* target/allure-results/
              echo "History copied successfully"
            else
              echo "No history directory found in gh-pages"
            fi
            git worktree remove gh-pages-dir
          else
            echo "No gh-pages branch found - this will be the first run"
          fi
        continue-on-error: true

      # 5. Run Maven tests
      - name: Run Tests
        run: mvn clean test -Dmaven.test.failure.ignore=true

      # 6. Install Allure CLI
      - name: Install Allure CLI
        run: |
          ALLURE_VERSION=2.26.0
          wget https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
          tar -zxvf allure-$ALLURE_VERSION.tgz -C $HOME/
          echo "$HOME/allure-$ALLURE_VERSION/bin" >> $GITHUB_PATH

      - name: Check Allure version
        run: allure --version

      # 7. Generate Allure report with debugging
      - name: Generate Allure Report
        run: |
          echo "Contents of target/allure-results before generation:"
          ls -la target/allure-results/
          
          # Generate report
          allure generate target/allure-results -o target/allure-report --clean
          
          echo "Contents of target/allure-report after generation:"
          ls -la target/allure-report/
          
          # Check if history was generated
          if [ -d "target/allure-report/history" ]; then
            echo "History directory created in report:"
            ls -la target/allure-report/history/
          else
            echo "No history directory in generated report"
          fi

      # 8. Deploy to GitHub Pages with history
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      # 9. Upload Allure report as artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: target/allure-report

      # 10. Deploy to your SLT server
      - name: Deploy Allure Report with rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: target/allure-report/
          remote_path: /var/www/html/selenium-report
          remote_host: ${{ secrets.SLT_HOST }}
          remote_user: ${{ secrets.SLT_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
